#!/bin/bash
# Benjamin Hodgens
export LC_ALL=C # will hopefully speed things up a bit; untested
# Attempt to convert timestamp strings to something standard and usable
# should've written this in perl
# currently only works on 'messages' format 
# assumes current calendar year unless specified as $1
# input is piped in
# eg. $ cat messages | tsconv 2015
# WARNING being used by panichash.sh, DO NOT alter without determining impact
#set -v 
#set -x
# TODO presume collector year if not available ? alternately something based on time within year for current or prior year
 # should hopefully speed things up a smidge 
function mlog() {
    echo "LOG: $1 ln ${BASH_LINENO[*]}"
}

t_sep="T" # datetime separator 
log_type="" # default
year=$(date +%Y) # default # TODO refine in some way so we don't end up with logs from the wrong year
filedef="/dev/stdin" # default
usage="$(basename $0) -[rsf|msgs] [-year=<4-digit-year>] <filename>"
for arg in "$@"; do
    case $arg in
        -rsf) 
            log_type="rsf"
            shift
        ;;
        -msgs)
            log_type="msgs"
            shift
        ;;
        -year=*|-y=*)
            year="${flag#*=}"
            shift
        ;;
        *)
            if [[ -f $arg ]]; then # TODO make this an array of input files
                filedef="$arg"
            else
                echo "wrong input: $arg"
                echo $usage
                exit
            fi
            shift
        ;;            
    esac
#    echo "Log type is: $log_type"
#    echo "filedef is: $filedef"
done 
if [[ $log_type = "" ]]; then
    echo "File timestamp format must be specified."
    echo $usage
    exit
fi
# NOTE: RSF logs are evil, in that sometimes for the day they'll use 2 digits, sometimes 1 digit and an extra space, and sometimes no extra space
mkyear () { 
    echo $1
}
ts_check () {
    if [[ $1 =~ ^[0-9]{4}-[0-9]{2}-[0-9][0-9]T ]]; then
        saved_ts="$1 -     "
#        echo "\"$1\""
#        echo "SAVED ts: $this_ts"
    fi
}
function monthnum () { 
    case $1 in 
    Jan)
        month=01
    ;;
    Feb)
        month=02
    ;;
    Mar)
        month=03
    ;;
    Apr)
        month=04
    ;;
    May)
        month=05
    ;;
    Jun)
        month=06
    ;;
    Jul)
        month=07
    ;;
    Aug)
        month=08
    ;;
    Sep)
        month=09
    ;;
    Oct)
        month=10
    ;;
    Nov)
        month=11
    ;;
    Dec)
        month=12
    ;;
    *)
#        month="$saved_ts ### "
    ;;
    esac 
    echo $month
}

while read piped; do 
    #echo this_month $this_month
    #echo month_num $month_num
    #log "$filedef"
    case $log_type in 
        msgs)
            this_month=$(echo $piped | cut -f 1 -d " ")
            month_num=$(monthnum "$this_month")
            piped=$(echo $piped | sed -e "s/$this_month/$month_num/" -e "s/^\([[:digit:]]\)/$year \1/g" -e "s/ /-/" -e 's/ /-/' -e "s/ /$t_sep/") # works for `messages`
            this_ts=$(echo $piped | cut -f 1 -d " ")
        ;;
        rsf)
            piped=$(echo $piped | sed -e 's/^[[:blank:]]//' -e "s/\^*//" -e 's/^vvv*//' 's/^----.*//' -e "s/^==//" -e '/^$/d') # clean up shit
            if [[ ! -z $piped ]]; then
                piped=$(echo $piped | sed -e "/^\[[[:alpha:]]\{3\}\ [[:alpha:]]\{3\}/s/^\[[[:alpha:]]\{3\}//" -e "s/^\[[[:digit:]]* //" -e "s/\]//") # works for `rsfmon.log`, mostly
                if [[ $piped =~ ^[A-Z][a-z]{2}\ [\ 0-9]* ]]; then 
                    this_month=$(echo $piped | cut -f 1 -d " ")
                    month_num=$(monthnum "$this_month")
#                    echo month $this_month $month_num
                    # todo year calc here

                    piped=$(echo $piped | sed -e "s/$this_month/$month_num/" -e "s/^ //" -e "s/^\([[:digit:]]\)/$year \1/g" -e "s/ /-/" -e "s/ /-/" -e "s/ /$t_sep/")  
                    this_ts=$(echo $piped | cut -f 1 -d " ")
                else
                    piped="$saved_ts $piped"
                fi
            fi
        ;;
    esac
    ts_check "$this_ts"
    if [[ ! -z $piped ]]; then
        printf "%s\n" "$piped"
    fi
done < "$filedef" 
